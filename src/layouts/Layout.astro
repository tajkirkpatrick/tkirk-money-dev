---
import "@/styles/globals.css";
import "@fontsource-variable/playfair-display";
import "@fontsource-variable/dm-sans";

import Navbar from "@/components/Navbar";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body id="body">
    <Navbar client:load />
    <slot />
    <script>
      window.addEventListener(
        "DOMContentLoaded",
        () =>
          (document.getElementById("body")!.style.height =
            window.innerHeight + "px"),
      );
      window.addEventListener(
        "resize",
        () =>
          (document.getElementById("body")!.style.height =
            window.innerHeight + "px"),
      );
    </script>
    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </body>
</html>
